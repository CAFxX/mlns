// minimal latency 4-sorter for B bits values
// generated by mlnsgen
// comparisons=6, evals=75, total cases=64, valid cases=24, orderings=24
module nsorter_4 #(
  parameter B = 64
) (
  input [B-1:0] in [3:0],
  output [B-1:0] out [3:0]
);
  wire c0 = in[0] < in[1];
  wire c1 = in[0] < in[2];
  wire c2 = in[0] < in[3];
  wire c3 = in[1] < in[2];
  wire c4 = in[1] < in[3];
  wire c5 = in[2] < in[3];
  always @(*) begin
    case ({c0,c1,c2,c3,c4,c5})
      6'b000000: out = {in[3],in[2],in[1],in[0]};
      6'b000001: out = {in[2],in[3],in[1],in[0]};
      6'b000011: out = {in[2],in[1],in[3],in[0]};
      6'b000100: out = {in[3],in[1],in[2],in[0]};
      6'b000110: out = {in[1],in[3],in[2],in[0]};
      6'b000111: out = {in[1],in[2],in[3],in[0]};
      6'b001011: out = {in[2],in[1],in[0],in[3]};
      6'b001111: out = {in[1],in[2],in[0],in[3]};
      6'b010100: out = {in[3],in[1],in[0],in[2]};
      6'b010110: out = {in[1],in[3],in[0],in[2]};
      6'b011110: out = {in[1],in[0],in[3],in[2]};
      6'b011111: out = {in[1],in[0],in[2],in[3]};
      6'b100000: out = {in[3],in[2],in[0],in[1]};
      6'b100001: out = {in[2],in[3],in[0],in[1]};
      6'b101001: out = {in[2],in[0],in[3],in[1]};
      6'b101011: out = {in[2],in[0],in[1],in[3]};
      6'b110000: out = {in[3],in[0],in[2],in[1]};
      6'b110100: out = {in[3],in[0],in[1],in[2]};
      6'b111000: out = {in[0],in[3],in[2],in[1]};
      6'b111001: out = {in[0],in[2],in[3],in[1]};
      6'b111011: out = {in[0],in[2],in[1],in[3]};
      6'b111100: out = {in[0],in[3],in[1],in[2]};
      6'b111110: out = {in[0],in[1],in[3],in[2]};
      6'b111111: out = {in[0],in[1],in[2],in[3]};
      default: out = {4{B{1'bx}}}; // 40 invalid cases
    endcase
  end
endmodule
